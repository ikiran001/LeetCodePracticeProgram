package BinarySearch;


public class StreectlySortedMatrix {

	public static void main(String[] args) {


	}
	//search in the row provided, between the colums provided
	static int[] binarySearch(int[][]matrix,int target,int row, int cStart,int cEnd) {
		while(cStart<cEnd) {
			int mid=cStart+(cEnd-cStart)/2;	
			if(matrix[row][mid]==target) {
				return new int[] {row,mid};
			}
			else if(matrix[row][mid]>target) {
				cEnd=mid-1;
			}
			else {
				cStart=mid+1;
			}
		}
		return new int[] {-1,-1};

	}

	static int[] search(int[][] matrix, int target) {
		int row= matrix.length;
		int cols=matrix[row].length;

		if(row==1) {
			return binarySearch(matrix, target, 0, 0, cols-1);
		}
		//take the middle colum , and perform binary search on it
		//run the loop till 2 rows remaining
		int rStart=0;
		int rEnd=row-1;
		int cMid=cols/2;

		while(rStart<rEnd-1) {
			int mid=rStart+(rEnd-rStart)/2;

			if(target==matrix[cMid][mid]) {
				return new int[] {cMid,mid};
			}
			else if(target>matrix[cMid][mid]) {
				rStart=mid;
			}
			else  {
				rEnd=mid;
			}
		}
		
		// mow we have two rows
		//chekc whather the target is in the col of rows
		if(matrix[rStart][cMid]==target) {
			return new int[] {rStart,cMid};
			}
		else if(matrix[rStart+1][cMid]==target) {
			return new int[] {rStart+1,cMid};
			}

	}

}
